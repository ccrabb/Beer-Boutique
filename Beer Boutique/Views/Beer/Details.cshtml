@using System.Configuration
@using BeerBoutique
@using Newtonsoft.Json
@model Models.ViewModels.BeerViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
    function BeerImage(instagramUrl, active, instagramText, link) {
        var self = this;
        self.url = instagramUrl;
        self.isActive = active;
        self.text = instagramText;
        self.link = link;
    }

    function BeerViewModel() {
        var self = this;

        self.beerImages = ko.observableArray([
           new BeerImage('@Url.Content("~/Content/images/beertoast.jpg")', true, 'Cheers!', '#')
        ]);

        self.addImage = function (instagramUrl, active, instagramText, link) {
            self.beerImages.push(new BeerImage(instagramUrl, active, instagramText, link));
        };
    }
</script>

<section>
    <div class="container">
        <div class="details">
            <div class="row">
                <div class="span7">
                    <div class="details-header">
                        <div class="header-container">
                            <h5>@Html.DisplayTextFor(x => x.Name)</h5>
                            <div class="rateit" id="rateDiv" data-rateit-value="@( Model.Overall / 2)"></div>
                            <div class="details-meta">
                                <strong><a href=@Url.Action("Details", "Brewery", new { id = Model.BreweryID })>@Model.Brewery</a></strong><br />
                                <i>@Html.DisplayTextFor(x => x.Location)</i>
                            </div>
                            @if (User.Identity.IsAuthenticated)
                            {
                                <div>
                                    @Html.ActionLink("Review", "_Review", "Review", new { beerId = Model.ID }, new { data_toggle = "modal", type = "button", @class = "btn btn-danger", data_target = "#review_modal" })
                                </div>
                            }
                        </div>
                    </div>
                    <div class="details-content">
                        <ul>
                            <li>@Html.DisplayFor(x => x.Style)</li>
                            <li>@Html.DisplayFor(x => x.ABV, new { data_bind = "text: ABV" })% ABV</li>
                            <li>@Html.DisplayFor(x => x.IBU, new { data_bind = "value: IBU" }) IBU</li>
                            <li>@Html.DisplayFor(x => x.SRM, new { data_bind = "value: SRM" }) SRM</li>
                        </ul>
                        @Html.DisplayTextFor(x => x.Description)
                    </div>
                </div>
                <div class="span4">
                    <div id="myCarousel" class="carousel" style="visibility: hidden">
                        <ol class="carousel-indicators">
                            <li data-target="#myCarousel" data-slide-to="0" class="active"></li>
                            <li data-target="#myCarousel" data-slide-to="1"></li>
                            <li data-target="#myCarousel" data-slide-to="2"></li>
                            <li data-target="#myCarousel" data-slide-to="3"></li>
                            <li data-target="#myCarousel" data-slide-to="4"></li>
                        </ol>
                        <!-- Carousel items -->
                        <div class="carousel-inner">
                            <div data-bind="foreach: beerImages">
                                <div class="item" data-bind="css: { active : isActive }">
                                    <img data-bind="attr: {src: url, alt: text }" />
                                    <div class="carousel-caption">
                                        <p><a data-bind="attr: { href: link }"><span data-bind="text: text"></span></a></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Carousel nav -->
                        <a class="carousel-control left" href="#myCarousel" data-slide="prev">&lsaquo;</a>
                        <a class="carousel-control right" href="#myCarousel" data-slide="next">&rsaquo;</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<section>
    <div class="container">
        <div style="text-align: center;">
            <h2>Similar Beers</h2>
        </div>
    </div>
    <div class="container">
        <div class="row-fluid">
            <div class="span4">
                @{ Html.RenderPartial("_Summary", Model.SimilarBeers[0]); }
            </div>
            <div class="span4">
                @{ Html.RenderPartial("_Summary", Model.SimilarBeers[1]); }
            </div>
            <div class="span4">
                @{ Html.RenderPartial("_Summary", Model.SimilarBeers[2]); }
            </div>
        </div>
    </div>
</section>
<section>
    <div class="container">
        <div style="text-align: center;">
            <h2>Reviews</h2>
        </div>
    </div>
    <div class="container">
        @{ Html.RenderAction("_Reviews", "Review", new { beerId = Model.ID }); }
    </div>
</section>

<div class="modal hide fade" id="review_modal">
    <div class="modal-header">
        <a class="close" data-dismiss="modal">&times;</a>
        <h3>Review - @Model.Name</h3>
    </div>
    <div class="modal-body">
        <p>Loading...</p>
    </div>
    <div class="modal-footer">
        <a href="#" class="btn" data-dismiss="modal">Close</a>
        <a href="#" class="btn btn-primary" id="saveReview">Save Changes</a>
    </div>
</div>

@Html.HiddenFor(x => x.ID, new { id = "hiddenID" })
<script type="text/javascript">
    $(document).ready(function () {
        
        window.viewModel = new BeerViewModel();
        ko.applyBindings(viewModel);

        $("#saveReview").bind("click", function (event, value) {
            $.ajax({
                type: "POST",
                url: "@Url.Action("_Review", "Review")",
                data: $("#reviewForm").serialize(),
                success: function (data) {
                    $("#review_modal").modal("hide");
                    window.bootstrap_alert.success('@Html.Raw(Alerts.SUCCESS_REVIEW)');
                },
                error: function (jxhr, msg, err) {
                    alert('There was a problem saving your review. Please try again later.');
                }
            });
        });

        var url = '@Html.Raw(String.Format("https://api.instagram.com/v1/tags/{0}/media/recent?client_id={1}&count=5&callback=?", Model.Name.Replace(" ", String.Empty).ToLower(), ConfigurationManager.AppSettings["InstagramClientID"]))';
        console.log(url);
        $.ajax({
            type: "GET",
            url: url,
            dataType: "json",
            success: function (data) {
                window.viewModel.beerImages.removeAll();
                $.each(data.data, function (i, item) {
                    window.viewModel.addImage(item.images.low_resolution.url, i === 0, item.caption.text, item.link);
                });

                $('.carousel').carousel();
                $('.carousel').css("visibility", "visible");
            }
        });
    });

    $('#rateDiv').bind('rated', function (event, value) {
        var beerId = $("#hiddenID").val();
        $.ajax({
            url: '@Url.Action("Rate", "Rating")',
            data: { beerId: beerId, score: value },
            type: 'POST',
            statusCode: {
                404: function () {
                    window.bootstrap_alert.error('@Html.Raw(Alerts.ALERT_UNAUTHORIZED)');
                }
            },
            success: function (data) {
                window.bootstrap_alert.success('@Html.Raw(Alerts.SUCCESS_RATING)');
            },
            error: function (jxhr, msg, err) {
                window.bootstrap_alert.error('@Html.Raw(Alerts.ALERT_ERROR)');
            }
        });
    });
</script>

@section Scripts {
    @Scripts.Render(BundleConfig.SCRIPT_KNOCKOUTJS);
}

